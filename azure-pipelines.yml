# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: Docker-AKSDeployment-updated

trigger:
- main

pool:
  vmImage: ubuntu-latest


variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'acr'
  imageRepository: 'webapp'
  containerRegistry: 'demoprayashi.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/app/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: CopyFiles@2
      inputs:
        SourceFolder: 'manifests/'
        Contents: '**/*.yml'
        TargetFolder: '$(Pipeline.Workspace)/manifests'
    
    - task: PublishPipelineArtifact@1
      inputs:
       targetPath: '$(Pipeline.Workspace)/manifests'
       artifact: 'manifests'
       publishLocation: 'pipeline'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
      environment: 'aks.default'
    strategy:
      runOnce:
        deploy:
          steps:

          - task: KubernetesManifest@0
            displayName: Deploy application to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
                $(Pipeline.Workspace)/manifests/phaseoneapp-ingress.yml
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

          
          
